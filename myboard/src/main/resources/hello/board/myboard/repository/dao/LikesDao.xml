<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hello.board.myboard.repository.dao.LikesDao">
    <sql id="likesColumns">
        likes_id, member_id, board_id, reply_id, likes_regdate
    </sql>

    <insert id="saveBoardLike" useGeneratedKeys="true" keyProperty="likesId" parameterType="LikesVo">
        insert into
        likes
            (member_id, board_id, likes_regdate)
        values
            (#{memberId}, #{boardId}, now())
    </insert>

    <insert id="saveReplyLike" useGeneratedKeys="true" keyProperty="likesId" parameterType="LikesVo">
        insert into
        likes
            (member_id, reply_id, likes_regdate)
        values
            (#{memberId}, #{replyId}, now())
    </insert>

    <delete id="deleteByMemberIdAndBoardId" parameterType="Map">
        delete
        from
            likes
        where
            likes.member_id = #{memberId} and likes.board_id = #{boardId}
    </delete>

    <delete id="deleteByMemberIdAndReplyId" parameterType="Map">
        delete
        from
            likes
        where
            likes.member_id = #{memberId} and likes.reply_id = #{replyId}
    </delete>

    <select id="findByMemberIdAndBoardId" parameterType="Map" resultType="LikesVo">
        select
            <include refid="likesColumns"/>
        from
            likes
        where
            likes.member_id = #{memberId} and likes.board_id = #{boardId}
    </select>

    <select id="findByMemberIdAndReplyId" parameterType="Map" resultType="LikesVo">
        select
            <include refid="likesColumns"/>
        from
            likes
        where
            likes.member_id = #{memberId} and likes.reply_id = #{replyId}
    </select>

    <select id="findCountByBoardId" parameterType="Long" resultType="Integer">
        select
            count(likes.likes_id)
        from
            likes
        where
            likes.board_id = #{boardId}
    </select>

    <select id="findCountByReplyId" parameterType="Long" resultType="Integer">
        select
            count(likes.likes_id)
        from
            likes
        where
            likes.reply_id = #{replyId}
    </select>

    <resultMap id="likesBoardCountDtoMap" type="LikesBoardCountDto">
        <id property="boardId" column="board_id"/>
        <result property="likeCount" column="like_count"/>
    </resultMap>

    <!-- 일(Board)대다(Likes) 페이징 쿼리에서 필요한 IN 쿼리  (N + 1 문제 해결) -->
    <select id="findBoardLikeByBoardIdList" resultMap="likesBoardCountDtoMap">
        select
            b.board_id, count(l.likes_id) as like_count
        from
            board as b left outer join likes as l on (l.board_id = b.board_id)
        where
            b.board_id in
                <foreach collection="boardIdList" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
        group by
            b.board_id
    </select>

    <resultMap id="likesReplyCountDtoMap" type="LikesReplyCountDto">
        <id property="replyId" column="reply_id"/>
        <result property="replyLikeCount" column="reply_like_count"/>
    </resultMap>

    <!-- reply 페이징 쿼리 리스트 조회시 일대다 likes 를 조인으로 가져오게 되면 쿼리조회 수가 다 쪽인
    likes 컬럼이 많아지기 때문에 페이징이 안되는 문제가 발생한다. 그렇다고 따로 조회하려면 리스트 개수 만큼
    likes 테이블에서 조회를 해야한다. (N + 1 문제 발생) IN 쿼리를 이용하여 페이징에서 조회한 replyId 값 만큼
    group by 로 묶어서 count 를 집계한다. 그리고 service 로직에서 페이징 된 replyDto 에 값을 넣어준다.(비즈니스 로직에서 해결) -->
    <!-- myLikesReplyCount 를 받기 위해 동적쿼리로 작성 -->
    <select id="findReplyLikesCountByReplyIdListAndMemberId" resultType="Map" resultMap="likesReplyCountDtoMap">
        select
            r.reply_id, count(l.likes_id) as reply_like_count
        from
            reply as r left outer join likes as l on (l.reply_id = r.reply_id)
        <where>
            <if test="memberId != null">
                AND l.member_id = #{memberId}
            </if>
            <if test="!@org.springframework.util.CollectionUtils@isEmpty(replyIdList)">
                AND r.reply_id in
                    <foreach collection="replyIdList" item="item" index="index" open="(" close=")" separator=",">
                        #{item}
                    </foreach>
            </if>
        </where>
        group by
            r.reply_id
    </select>
</mapper>